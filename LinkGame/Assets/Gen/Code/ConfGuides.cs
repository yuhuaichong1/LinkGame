//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg
{

public sealed partial class ConfGuides :  Bright.Config.BeanBase 
{
    public ConfGuides(ByteBuf _buf) 
    {
        Sn = _buf.ReadInt();
        NextStep = _buf.ReadInt();
        Notes = _buf.ReadString();
        BackStep = _buf.ReadInt();
        IfBackPlay = _buf.ReadBool();
        IfNextStep = _buf.ReadBool();
        IfNextPlay = _buf.ReadBool();
        AutohiddenTime = _buf.ReadFloat();
        DiglogContentId = _buf.ReadInt();
        DiglogPos = _buf.ReadString();
        HandPos = _buf.ReadString();
        IfMask = _buf.ReadBool();
        TransparentPos = _buf.ReadString();
        ClickPos = _buf.ReadString();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Extra = new System.Collections.Generic.Dictionary<string, string>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { string _k0;  _k0 = _buf.ReadString(); string _v0;  _v0 = _buf.ReadString();     Extra.Add(_k0, _v0);}}
        PostInit();
    }

    public static ConfGuides DeserializeConfGuides(ByteBuf _buf)
    {
        return new ConfGuides(_buf);
    }

    /// <summary>
    /// sn
    /// </summary>
    public int Sn { get; protected set; }
    /// <summary>
    /// 下一步骤
    /// </summary>
    public int NextStep { get; protected set; }
    /// <summary>
    /// 说明
    /// </summary>
    public string Notes { get; protected set; }
    /// <summary>
    /// 引导中断后，再次进入时跳转步骤
    /// </summary>
    public int BackStep { get; protected set; }
    /// <summary>
    /// 引导中断后，再次进入时是否执行跳转的步骤
    /// </summary>
    public bool IfBackPlay { get; protected set; }
    /// <summary>
    /// 点击/倒计时结束后是否前进一步
    /// </summary>
    public bool IfNextStep { get; protected set; }
    /// <summary>
    /// 前进一步后是否执行接下来的步骤
    /// </summary>
    public bool IfNextPlay { get; protected set; }
    /// <summary>
    /// 引导自动消失时间
    /// </summary>
    public float AutohiddenTime { get; protected set; }
    /// <summary>
    /// 提示框内容（对应Language表）
    /// </summary>
    public int DiglogContentId { get; protected set; }
    /// <summary>
    /// 提示框位置
    /// </summary>
    public string DiglogPos { get; protected set; }
    /// <summary>
    /// 手位置
    /// </summary>
    public string HandPos { get; protected set; }
    /// <summary>
    /// 是否有黑色遮罩
    /// </summary>
    public bool IfMask { get; protected set; }
    /// <summary>
    /// 透明框位置
    /// </summary>
    public string TransparentPos { get; protected set; }
    /// <summary>
    /// 教程可点击部分
    /// </summary>
    public string ClickPos { get; protected set; }
    /// <summary>
    /// 额外字段
    /// </summary>
    public System.Collections.Generic.Dictionary<string, string> Extra { get; protected set; }

    public const int __ID__ = 1865134427;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public void Reload(ConfGuides reloadData)
    {
        Sn = reloadData.Sn;
        NextStep = reloadData.NextStep;
        Notes = reloadData.Notes;
        BackStep = reloadData.BackStep;
        IfBackPlay = reloadData.IfBackPlay;
        IfNextStep = reloadData.IfNextStep;
        IfNextPlay = reloadData.IfNextPlay;
        AutohiddenTime = reloadData.AutohiddenTime;
        DiglogContentId = reloadData.DiglogContentId;
        DiglogPos = reloadData.DiglogPos;
        HandPos = reloadData.HandPos;
        IfMask = reloadData.IfMask;
        TransparentPos = reloadData.TransparentPos;
        ClickPos = reloadData.ClickPos;
        if(Extra==null)
        {
            Extra = reloadData.Extra;
        }else
        {
            foreach (var rawDataKey in Extra.Keys.ToList())
            {
                if(!reloadData.Extra.ContainsKey(rawDataKey))
                {
                    Extra.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.Extra)
            {
                if(Extra.ContainsKey(reload.Key))
                {
                    Extra[reload.Key] = reload.Value;
                }else
                {
                    Extra.Add(reload.Key,reload.Value);
                }
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Sn:" + Sn + ","
        + "NextStep:" + NextStep + ","
        + "Notes:" + Notes + ","
        + "BackStep:" + BackStep + ","
        + "IfBackPlay:" + IfBackPlay + ","
        + "IfNextStep:" + IfNextStep + ","
        + "IfNextPlay:" + IfNextPlay + ","
        + "AutohiddenTime:" + AutohiddenTime + ","
        + "DiglogContentId:" + DiglogContentId + ","
        + "DiglogPos:" + DiglogPos + ","
        + "HandPos:" + HandPos + ","
        + "IfMask:" + IfMask + ","
        + "TransparentPos:" + TransparentPos + ","
        + "ClickPos:" + ClickPos + ","
        + "Extra:" + Bright.Common.StringUtil.CollectionToString(Extra) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
