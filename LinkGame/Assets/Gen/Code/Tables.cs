//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using Bright.Serialization;
using UnityEngine.Networking;
using System.IO;
using XrCode;


namespace cfg
{
   
	public partial class Tables
	{
		public TbUIRes TbUIRes {get; private set;}
		public TbLanguage TbLanguage {get; private set;}
		public TBAudio TBAudio {get; private set;}
		public TBGuides TBGuides {get; private set;}
		public TBLevel TBLevel {get; private set;}
		public TBGoodIcon TBGoodIcon {get; private set;}
		public TBLinkLine TBLinkLine {get; private set;}
		public TBTask TBTask {get; private set;}
		public TBPayRegion TBPayRegion {get; private set;}
		public TBPayChannel TBPayChannel {get; private set;}

		private Queue<string> configNames;
		private Queue<System.Action<ByteBuf>> configCbFuncs;
		private System.Func<string, ByteBuf> _loader;
		private System.Action finishHandle;
		private string ServerResourceURL = "http://192.168.30.35:5005/";

		private System.Collections.Generic.Dictionary<string, object> tables;

		public Tables(System.Func<string, ByteBuf> loader)
		{
			_loader = loader;
			tables = new System.Collections.Generic.Dictionary<string, object>();
			TbUIRes = new TbUIRes(loader("tbuires")); 
			tables.Add("TbUIRes", TbUIRes);
			TbLanguage = new TbLanguage(loader("tblanguage")); 
			tables.Add("TbLanguage", TbLanguage);
			TBAudio = new TBAudio(loader("tbaudio")); 
			tables.Add("TBAudio", TBAudio);
			TBGuides = new TBGuides(loader("tbguides")); 
			tables.Add("TBGuides", TBGuides);
			TBLevel = new TBLevel(loader("tblevel")); 
			tables.Add("TBLevel", TBLevel);
			TBGoodIcon = new TBGoodIcon(loader("tbgoodicon")); 
			tables.Add("TBGoodIcon", TBGoodIcon);
			TBLinkLine = new TBLinkLine(loader("tblinkline")); 
			tables.Add("TBLinkLine", TBLinkLine);
			TBTask = new TBTask(loader("tbtask")); 
			tables.Add("TBTask", TBTask);
			TBPayRegion = new TBPayRegion(loader("tbpayregion")); 
			tables.Add("TBPayRegion", TBPayRegion);
			TBPayChannel = new TBPayChannel(loader("tbpaychannel")); 
			tables.Add("TBPayChannel", TBPayChannel);
	
			PostInit();
			ResolveAllTable();
			PostResolve();
		}

	    public Tables(System.Action cb)
        {
			finishHandle = cb;
            configNames = new Queue<string>();
            configCbFuncs = new Queue<System.Action<ByteBuf>>();
		    tables = new System.Collections.Generic.Dictionary<string, object>();
			configNames.Enqueue("tbuires");
            configCbFuncs.Enqueue(OnTbUIResDataFinish);
			configNames.Enqueue("tblanguage");
            configCbFuncs.Enqueue(OnTbLanguageDataFinish);
			configNames.Enqueue("tbaudio");
            configCbFuncs.Enqueue(OnTBAudioDataFinish);
			configNames.Enqueue("tbguides");
            configCbFuncs.Enqueue(OnTBGuidesDataFinish);
			configNames.Enqueue("tblevel");
            configCbFuncs.Enqueue(OnTBLevelDataFinish);
			configNames.Enqueue("tbgoodicon");
            configCbFuncs.Enqueue(OnTBGoodIconDataFinish);
			configNames.Enqueue("tblinkline");
            configCbFuncs.Enqueue(OnTBLinkLineDataFinish);
			configNames.Enqueue("tbtask");
            configCbFuncs.Enqueue(OnTBTaskDataFinish);
			configNames.Enqueue("tbpayregion");
            configCbFuncs.Enqueue(OnTBPayRegionDataFinish);
			configNames.Enqueue("tbpaychannel");
            configCbFuncs.Enqueue(OnTBPayChannelDataFinish);

            LoadAllConfig();
        }

        public void LoadAllConfig()
        {
            if (configNames.Count == 0)
            {
                OnLoadTbDataFinish();
                return;
            }
            string configName = configNames.Dequeue();
            System.Action<ByteBuf> cb = configCbFuncs.Dequeue();
            Game.Instance.StartCoroutine(WebLoad(configName, cb,LoadAllConfig));
        }

        public IEnumerator WebLoad(string fileName, System.Action<ByteBuf> confInst, System.Action cb)
        {
            Debug.LogError($"[ConfPath]:Begin load config {fileName}");
            //string path = StringUtil.Concat(ServerResourceURL, $"StreamingAssets/Data/{fileName}.bytes");
            string path = StringUtil.Concat(Application.streamingAssetsPath, $"/Data/{fileName}.bytes");
			
            //if (!File.Exists(path)) Debug.LogError($" config path is wrong. {fileName} ");

            UnityWebRequest request = UnityWebRequest.Get(path);
            request.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");
            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                confInst(new ByteBuf(request.downloadHandler.data));
                cb();
            }
            else
            {
                Debug.LogError($"[ConfPath]: UnityWebRequest Load fail: {request.result}");
            }
        }

		public void TranslateText(System.Func<string, string, string> translator)
		{
			TbUIRes.TranslateText(translator); 
			TbLanguage.TranslateText(translator); 
			TBAudio.TranslateText(translator); 
			TBGuides.TranslateText(translator); 
			TBLevel.TranslateText(translator); 
			TBGoodIcon.TranslateText(translator); 
			TBLinkLine.TranslateText(translator); 
			TBTask.TranslateText(translator); 
			TBPayRegion.TranslateText(translator); 
			TBPayChannel.TranslateText(translator); 
		}
		
		partial void PostInit();
		partial void PostResolve();
	
		private void ResolveAllTable()
		{
			TbUIRes.Resolve(tables);
			TbLanguage.Resolve(tables);
			TBAudio.Resolve(tables);
			TBGuides.Resolve(tables);
			TBLevel.Resolve(tables);
			TBGoodIcon.Resolve(tables);
			TBLinkLine.Resolve(tables);
			TBTask.Resolve(tables);
			TBPayRegion.Resolve(tables);
			TBPayChannel.Resolve(tables);
		}
	
		private void ReloadOneTable(string reloadTableName)
		{
			if (!tables.Keys.Contains(reloadTableName))
			{
				return;
			}
	
			switch (reloadTableName)
			{
				case "TbUIRes":
					TbUIRes.Reload(_loader("TbUIRes"));
					break;
				case "TbLanguage":
					TbLanguage.Reload(_loader("TbLanguage"));
					break;
				case "TBAudio":
					TBAudio.Reload(_loader("TBAudio"));
					break;
				case "TBGuides":
					TBGuides.Reload(_loader("TBGuides"));
					break;
				case "TBLevel":
					TBLevel.Reload(_loader("TBLevel"));
					break;
				case "TBGoodIcon":
					TBGoodIcon.Reload(_loader("TBGoodIcon"));
					break;
				case "TBLinkLine":
					TBLinkLine.Reload(_loader("TBLinkLine"));
					break;
				case "TBTask":
					TBTask.Reload(_loader("TBTask"));
					break;
				case "TBPayRegion":
					TBPayRegion.Reload(_loader("TBPayRegion"));
					break;
				case "TBPayChannel":
					TBPayChannel.Reload(_loader("TBPayChannel"));
					break;
			}
	
		}
	
		public void Reload(params string[] reloadTableNames)
		{
			foreach (var reloadTableName in reloadTableNames)
			{
				ReloadOneTable(reloadTableName);
			}
			ResolveAllTable();
		}
		
	
		public void ReloadAll()
		{
			Reload(tables.Keys.ToArray());
		}

		public void OnTbUIResDataFinish(ByteBuf buf)
		{
			TbUIRes = new TbUIRes(buf);
			tables.Add("TbUIRes", TbUIRes);
		}
		public void OnTbLanguageDataFinish(ByteBuf buf)
		{
			TbLanguage = new TbLanguage(buf);
			tables.Add("TbLanguage", TbLanguage);
		}
		public void OnTBAudioDataFinish(ByteBuf buf)
		{
			TBAudio = new TBAudio(buf);
			tables.Add("TBAudio", TBAudio);
		}
		public void OnTBGuidesDataFinish(ByteBuf buf)
		{
			TBGuides = new TBGuides(buf);
			tables.Add("TBGuides", TBGuides);
		}
		public void OnTBLevelDataFinish(ByteBuf buf)
		{
			TBLevel = new TBLevel(buf);
			tables.Add("TBLevel", TBLevel);
		}
		public void OnTBGoodIconDataFinish(ByteBuf buf)
		{
			TBGoodIcon = new TBGoodIcon(buf);
			tables.Add("TBGoodIcon", TBGoodIcon);
		}
		public void OnTBLinkLineDataFinish(ByteBuf buf)
		{
			TBLinkLine = new TBLinkLine(buf);
			tables.Add("TBLinkLine", TBLinkLine);
		}
		public void OnTBTaskDataFinish(ByteBuf buf)
		{
			TBTask = new TBTask(buf);
			tables.Add("TBTask", TBTask);
		}
		public void OnTBPayRegionDataFinish(ByteBuf buf)
		{
			TBPayRegion = new TBPayRegion(buf);
			tables.Add("TBPayRegion", TBPayRegion);
		}
		public void OnTBPayChannelDataFinish(ByteBuf buf)
		{
			TBPayChannel = new TBPayChannel(buf);
			tables.Add("TBPayChannel", TBPayChannel);
		}
		//Finish Load all table 
		public void OnLoadTbDataFinish()
		{
			PostInit();
			ResolveAllTable();
			PostResolve();
			finishHandle?.Invoke();
		}

	}

}