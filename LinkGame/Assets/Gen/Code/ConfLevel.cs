//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg
{

public sealed partial class ConfLevel :  Bright.Config.BeanBase 
{
    public ConfLevel(ByteBuf _buf) 
    {
        Sn = _buf.ReadInt();
        LevelSize = _buf.ReadString();
        LevelType = _buf.ReadInt();
        GoodKinds = _buf.ReadInt();
        MoveDic = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);FixedGridMap = new System.Collections.Generic.Dictionary<string, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { string _k0;  _k0 = _buf.ReadString(); int _v0;  _v0 = _buf.ReadInt();     FixedGridMap.Add(_k0, _v0);}}
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);EmptyGridMap = new System.Collections.Generic.Dictionary<string, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { string _k0;  _k0 = _buf.ReadString(); int _v0;  _v0 = _buf.ReadInt();     EmptyGridMap.Add(_k0, _v0);}}
        HiddleGoodMove = _buf.ReadString();
        HiddleGoodStay = _buf.ReadString();
        ObstacleMove = _buf.ReadString();
        ObstacleStay = _buf.ReadString();
        HiddleGoodDelay = _buf.ReadString();
        WithdrawType = _buf.ReadInt();
        Reward = _buf.ReadFloat();
        SizeExtra = _buf.ReadFloat();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Assistgood = new System.Collections.Generic.Dictionary<string, int>(n0 * 3 / 2);for(var i0 = 0 ; i0 < n0 ; i0++) { string _k0;  _k0 = _buf.ReadString(); int _v0;  _v0 = _buf.ReadInt();     Assistgood.Add(_k0, _v0);}}
        PostInit();
    }

    public static ConfLevel DeserializeConfLevel(ByteBuf _buf)
    {
        return new ConfLevel(_buf);
    }

    /// <summary>
    /// sn
    /// </summary>
    public int Sn { get; protected set; }
    /// <summary>
    /// 物品总数
    /// </summary>
    public string LevelSize { get; protected set; }
    /// <summary>
    /// 关卡类型
    /// </summary>
    public int LevelType { get; protected set; }
    /// <summary>
    /// 物品种类数量
    /// </summary>
    public int GoodKinds { get; protected set; }
    /// <summary>
    /// 物品移动方向
    /// </summary>
    public int MoveDic { get; protected set; }
    /// <summary>
    /// 当关卡类型为固定关卡时，物品的排序
    /// </summary>
    public System.Collections.Generic.Dictionary<string, int> FixedGridMap { get; protected set; }
    /// <summary>
    /// 当关卡类型为固定关卡时，物品的排序
    /// </summary>
    public System.Collections.Generic.Dictionary<string, int> EmptyGridMap { get; protected set; }
    /// <summary>
    /// 可移动的隐藏物的位置
    /// </summary>
    public string HiddleGoodMove { get; protected set; }
    /// <summary>
    /// 不移动的隐藏物的位置
    /// </summary>
    public string HiddleGoodStay { get; protected set; }
    /// <summary>
    /// 可移动的障碍物的位置
    /// </summary>
    public string ObstacleMove { get; protected set; }
    /// <summary>
    /// 不移动的障碍物的位置
    /// </summary>
    public string ObstacleStay { get; protected set; }
    /// <summary>
    /// 出现延迟隐藏的时间
    /// </summary>
    public string HiddleGoodDelay { get; protected set; }
    /// <summary>
    /// 兑现类型
    /// </summary>
    public int WithdrawType { get; protected set; }
    /// <summary>
    /// 通关奖励
    /// </summary>
    public float Reward { get; protected set; }
    /// <summary>
    /// 关卡缩放补正
    /// </summary>
    public float SizeExtra { get; protected set; }
    /// <summary>
    /// 工具物体的位置和种类
    /// </summary>
    public System.Collections.Generic.Dictionary<string, int> Assistgood { get; protected set; }

    public const int __ID__ = 1172697760;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public void Reload(ConfLevel reloadData)
    {
        Sn = reloadData.Sn;
        LevelSize = reloadData.LevelSize;
        LevelType = reloadData.LevelType;
        GoodKinds = reloadData.GoodKinds;
        MoveDic = reloadData.MoveDic;
        if(FixedGridMap==null)
        {
            FixedGridMap = reloadData.FixedGridMap;
        }else
        {
            foreach (var rawDataKey in FixedGridMap.Keys.ToList())
            {
                if(!reloadData.FixedGridMap.ContainsKey(rawDataKey))
                {
                    FixedGridMap.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.FixedGridMap)
            {
                if(FixedGridMap.ContainsKey(reload.Key))
                {
                    FixedGridMap[reload.Key] = reload.Value;
                }else
                {
                    FixedGridMap.Add(reload.Key,reload.Value);
                }
            }
        }
        if(EmptyGridMap==null)
        {
            EmptyGridMap = reloadData.EmptyGridMap;
        }else
        {
            foreach (var rawDataKey in EmptyGridMap.Keys.ToList())
            {
                if(!reloadData.EmptyGridMap.ContainsKey(rawDataKey))
                {
                    EmptyGridMap.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.EmptyGridMap)
            {
                if(EmptyGridMap.ContainsKey(reload.Key))
                {
                    EmptyGridMap[reload.Key] = reload.Value;
                }else
                {
                    EmptyGridMap.Add(reload.Key,reload.Value);
                }
            }
        }
        HiddleGoodMove = reloadData.HiddleGoodMove;
        HiddleGoodStay = reloadData.HiddleGoodStay;
        ObstacleMove = reloadData.ObstacleMove;
        ObstacleStay = reloadData.ObstacleStay;
        HiddleGoodDelay = reloadData.HiddleGoodDelay;
        WithdrawType = reloadData.WithdrawType;
        Reward = reloadData.Reward;
        SizeExtra = reloadData.SizeExtra;
        if(Assistgood==null)
        {
            Assistgood = reloadData.Assistgood;
        }else
        {
            foreach (var rawDataKey in Assistgood.Keys.ToList())
            {
                if(!reloadData.Assistgood.ContainsKey(rawDataKey))
                {
                    Assistgood.Remove(rawDataKey);
                }
            }
            foreach (var reload in reloadData.Assistgood)
            {
                if(Assistgood.ContainsKey(reload.Key))
                {
                    Assistgood[reload.Key] = reload.Value;
                }else
                {
                    Assistgood.Add(reload.Key,reload.Value);
                }
            }
        }
    }

    public override string ToString()
    {
        return "{ "
        + "Sn:" + Sn + ","
        + "LevelSize:" + LevelSize + ","
        + "LevelType:" + LevelType + ","
        + "GoodKinds:" + GoodKinds + ","
        + "MoveDic:" + MoveDic + ","
        + "FixedGridMap:" + Bright.Common.StringUtil.CollectionToString(FixedGridMap) + ","
        + "EmptyGridMap:" + Bright.Common.StringUtil.CollectionToString(EmptyGridMap) + ","
        + "HiddleGoodMove:" + HiddleGoodMove + ","
        + "HiddleGoodStay:" + HiddleGoodStay + ","
        + "ObstacleMove:" + ObstacleMove + ","
        + "ObstacleStay:" + ObstacleStay + ","
        + "HiddleGoodDelay:" + HiddleGoodDelay + ","
        + "WithdrawType:" + WithdrawType + ","
        + "Reward:" + Reward + ","
        + "SizeExtra:" + SizeExtra + ","
        + "Assistgood:" + Bright.Common.StringUtil.CollectionToString(Assistgood) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
