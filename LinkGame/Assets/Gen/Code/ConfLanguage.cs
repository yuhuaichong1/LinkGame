//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using System.Linq;



namespace cfg
{

public sealed partial class ConfLanguage :  Bright.Config.BeanBase 
{
    public ConfLanguage(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        ChineseS = _buf.ReadString();
        English = _buf.ReadString();
        German = _buf.ReadString();
        Japanese = _buf.ReadString();
        BrazilianPortuguese = _buf.ReadString();
        French = _buf.ReadString();
        Spanish = _buf.ReadString();
        Korean = _buf.ReadString();
        Indonesian = _buf.ReadString();
        Russian = _buf.ReadString();
        Hindi = _buf.ReadString();
        Thai = _buf.ReadString();
        Turkish = _buf.ReadString();
        LengthTest = _buf.ReadString();
        PostInit();
    }

    public static ConfLanguage DeserializeConfLanguage(ByteBuf _buf)
    {
        return new ConfLanguage(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public string Id { get; protected set; }
    /// <summary>
    /// 简体中文
    /// </summary>
    public string ChineseS { get; protected set; }
    /// <summary>
    /// 英文
    /// </summary>
    public string English { get; protected set; }
    /// <summary>
    /// 德语
    /// </summary>
    public string German { get; protected set; }
    /// <summary>
    /// 日语
    /// </summary>
    public string Japanese { get; protected set; }
    /// <summary>
    /// 巴西葡萄牙语
    /// </summary>
    public string BrazilianPortuguese { get; protected set; }
    /// <summary>
    /// 法语
    /// </summary>
    public string French { get; protected set; }
    /// <summary>
    /// 西班牙语
    /// </summary>
    public string Spanish { get; protected set; }
    /// <summary>
    /// 韩语
    /// </summary>
    public string Korean { get; protected set; }
    /// <summary>
    /// 印尼语
    /// </summary>
    public string Indonesian { get; protected set; }
    /// <summary>
    /// 俄语
    /// </summary>
    public string Russian { get; protected set; }
    /// <summary>
    /// 印度语
    /// </summary>
    public string Hindi { get; protected set; }
    /// <summary>
    /// 泰语
    /// </summary>
    public string Thai { get; protected set; }
    /// <summary>
    /// 土耳其语
    /// </summary>
    public string Turkish { get; protected set; }
    /// <summary>
    /// 超框测试
    /// </summary>
    public string LengthTest { get; protected set; }

    public const int __ID__ = 1093113532;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public void Reload(ConfLanguage reloadData)
    {
        Id = reloadData.Id;
        ChineseS = reloadData.ChineseS;
        English = reloadData.English;
        German = reloadData.German;
        Japanese = reloadData.Japanese;
        BrazilianPortuguese = reloadData.BrazilianPortuguese;
        French = reloadData.French;
        Spanish = reloadData.Spanish;
        Korean = reloadData.Korean;
        Indonesian = reloadData.Indonesian;
        Russian = reloadData.Russian;
        Hindi = reloadData.Hindi;
        Thai = reloadData.Thai;
        Turkish = reloadData.Turkish;
        LengthTest = reloadData.LengthTest;
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "ChineseS:" + ChineseS + ","
        + "English:" + English + ","
        + "German:" + German + ","
        + "Japanese:" + Japanese + ","
        + "BrazilianPortuguese:" + BrazilianPortuguese + ","
        + "French:" + French + ","
        + "Spanish:" + Spanish + ","
        + "Korean:" + Korean + ","
        + "Indonesian:" + Indonesian + ","
        + "Russian:" + Russian + ","
        + "Hindi:" + Hindi + ","
        + "Thai:" + Thai + ","
        + "Turkish:" + Turkish + ","
        + "LengthTest:" + LengthTest + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}
